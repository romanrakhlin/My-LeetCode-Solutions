# https://leetcode.com/problems/length-of-last-word/

"""
на самом деле идеально было бы перерешать эту задачу
работает она норм но вот по памяти она очень неэффективная
ведь мы сохраняем все вариации слов и по итогу получается
огромный массив а что было бы если строка состояла бы из
миллиона символов кароче алгоритм такой мы сначала задаем
массив для хранения всех вариаций слов и переменную для
хранения текущих слов после этого итерируем через все символы
и проверяем пустые ли они если нет до дополняем текущиее слово
а если нет то сбрасываем текущее слово все просто в конце
каждой итерации мы проверяем сброшено ли текущее слово
если нет то добавляем его в наш массив слов
в самом конце возвращаем длинну самого последнего слова
"""

class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        words = []
        cur_word = ""
        
        for i in s:
            if i != " ":
                cur_word += i
            else:
                cur_word = ""
            
            if cur_word != "":
                words.append(cur_word)
                
        return len(words[len(words) - 1])

"""
еще один вариант решения работает за O(1) !!!
по памяти хз сложно так сказать но суть в том что
вы возвращаем длинны последнего символа 
в превращенном из строки массиве с помощью метода split()
"""

class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        return len(s.split()[len(s.split()) - 1])

